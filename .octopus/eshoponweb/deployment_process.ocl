step "check-deployment-window" {
    name = "Check deployment window"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        notes = "Check production deployment window. If we're not inside the time, fail the deployment."
        properties = {
            Octopus.Action.Script.ScriptBody = "Write-Host \"Checking production deployment window\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "production-approval" {
    name = "Production approval"

    action {
        action_type = "Octopus.Manual"
        environments = ["production"]
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Please review and approve this deployment."
            Octopus.Action.Manual.ResponsibleTeamIds = "global/everyone"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "update-infrastructure-using-terraform" {
    name = "Update infrastructure using Terraform"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-1841"
            Octopus.Action.Template.Version = "14"
            Run.Runbook.Api.Key = "#{Project.API.DNS}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Create infrastructure"
            Run.Runbook.Project.Name = "#{Octopus.Project.Name}"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "hosted-windows"
    }
}

step "deploy-vote-service-clone-1" {
    name = "Deploy eshop-api Service"
    package_requirement = "AfterPackageAcquisition"
    properties = {
        Octopus.Action.TargetRoles = "ECS-Voting"
    }

    action "deploy-eshop-api-service" {
        action_type = "aws-ecs"
        notes = "Deploy the API service for the eShopOnWeb applciation."
        step_package_version = "1.3.4"
        worker_pool_variable = "Project.Worker.Pool"

        packages "eshop-api" {
            acquisition_location = "NotAcquired"
            feed = "aws-ecr"
            package_id = "eshop-api"
            step_package_inputs_reference_id = "e8ec47ee-474f-4e9f-b145-12130669d3c0"
        }

        inputs {
            desiredCount = 1
            maximumHealthPercent = 200
            minimumHealthPercent = 100
            name = "#{Project.AWS.ECS.Api.Task.Name}"

            additionalTags {
                enableEcsManagedTags = false
            }

            containers {
                containerName = "eshop-api"
                essential = true

                containerImageReference {
                    feedId = "Feeds-2520"
                    imageName = "eshop-api"
                    referenceId = "e8ec47ee-474f-4e9f-b145-12130669d3c0"
                }

                containerLogging {
                    type = "auto"
                }

                containerPortMappings {
                    containerPort = 80
                    protocol = "tcp"
                }

                containerStorage {
                    readOnlyRootFileSystem = false
                }

                environmentVariables {
                    key = "ConnectionStrings__CatalogConnection"
                    type = "plain"
                    value = "Server=#{Project.SQL.DNS},1433;Integrated Security=true;Initial Catalog=#{Project.Catalog.Database.Name};User Id=#{AWS.RDS.Admin.Username};Password=#{AWS.RDS.Admin.Password};Trusted_Connection=false;Trust Server Certificate=True;"
                }

                environmentVariables {
                    key = "ConnectionStrings__IdentityConnection"
                    type = "plain"
                    value = "Server=#{Project.SQL.DNS},1433;Integrated Security=true;Initial Catalog=#{Project.Identity.Database.Name};User Id=#{AWS.RDS.Admin.Username};Password=#{AWS.RDS.Admin.Password};Trusted_Connection=false;Trust Server Certificate=True;"
                }

                environmentVariables {
                    key = "ASPNETCORE_URLS"
                    type = "plain"
                    value = "http://+:80"
                }

                healthCheck {}

                networkSettings {
                    disableNetworking = false
                }

                repositoryAuthentication {
                    type = "default"
                }
            }

            networkConfiguration {
                autoAssignPublicIp = true

                securityGroupIds {
                    id = "#{Project.AWS.SecurityGroup.Id}"
                }

                subnetIds {
                    id = "#{Project.AWS.Subnet.Id}"
                }
            }

            task {
                cpu = 256
                memory = 512
                taskExecutionRole = "#{Project.AWS.TaskExecutionRole.Arn}"
                taskRole = ""

                runtimePlatform {
                    cpuArchitecture = "X86_64"
                    operatingSystemFamily = "LINUX"
                }
            }

            waitOption {
                timeout = 30
                type = "waitWithTimeout"
            }
        }
    }
}

step "deploy-eshop-api-service-clone-1" {
    name = "Deploy eshop-web Service"
    package_requirement = "AfterPackageAcquisition"
    properties = {
        Octopus.Action.TargetRoles = "ECS-Voting"
    }

    action {
        action_type = "aws-ecs"
        notes = "Deploy the eShopOnWeb front end ECS service."
        step_package_version = "1.3.4"
        worker_pool_variable = "Project.Worker.Pool"

        packages "eshop-web" {
            acquisition_location = "NotAcquired"
            feed = "aws-ecr"
            package_id = "eshop-web"
            step_package_inputs_reference_id = "e8ec47ee-474f-4e9f-b145-12130669d3c0"
        }

        inputs {
            desiredCount = 1
            maximumHealthPercent = 200
            minimumHealthPercent = 100
            name = "#{Project.AWS.ECS.Web.Task.Name}"

            additionalTags {
                enableEcsManagedTags = false
            }

            containers {
                containerName = "eshop-web"
                essential = true

                containerImageReference {
                    feedId = "Feeds-2520"
                    imageName = "eshop-web"
                    referenceId = "e8ec47ee-474f-4e9f-b145-12130669d3c0"
                }

                containerLogging {
                    type = "auto"
                }

                containerPortMappings {
                    containerPort = 80
                    protocol = "tcp"
                }

                containerStorage {
                    readOnlyRootFileSystem = false
                }

                environmentVariables {
                    key = "ConnectionStrings__CatalogConnection"
                    type = "plain"
                    value = "Server=#{Project.SQL.DNS},1433;Integrated Security=true;Initial Catalog=#{Project.Catalog.Database.Name};User Id=#{AWS.RDS.Admin.Username};Password=#{AWS.RDS.Admin.Password};Trusted_Connection=false;Trust Server Certificate=True;"
                }

                environmentVariables {
                    key = "ConnectionStrings__IdentityConnection"
                    type = "plain"
                    value = "Server=#{Project.SQL.DNS},1433;Integrated Security=true;Initial Catalog=#{Project.Identity.Database.Name};User Id=#{AWS.RDS.Admin.Username};Password=#{AWS.RDS.Admin.Password};Trusted_Connection=false;Trust Server Certificate=True;"
                }

                environmentVariables {
                    key = "ASPNETCORE_URLS"
                    type = "plain"
                    value = "http://+:80"
                }

                environmentVariables {
                    key = "baseUrls__apiBase"
                    type = "plain"
                    value = "http://#{Project.API.DNS}/api/"
                }

                healthCheck {}

                networkSettings {
                    disableNetworking = false
                }

                repositoryAuthentication {
                    type = "default"
                }
            }

            networkConfiguration {
                autoAssignPublicIp = true

                securityGroupIds {
                    id = "#{Project.AWS.SecurityGroup.Id}"
                }

                subnetIds {
                    id = "#{Project.AWS.Subnet.Id}"
                }
            }

            task {
                cpu = 256
                memory = 512
                taskExecutionRole = "#{Project.AWS.TaskExecutionRole.Arn}"
                taskRole = ""

                runtimePlatform {
                    cpuArchitecture = "X86_64"
                    operatingSystemFamily = "LINUX"
                }
            }

            waitOption {
                timeout = 30
                type = "waitWithTimeout"
            }
        }
    }
}