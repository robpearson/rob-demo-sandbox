step "check-deployment-window" {
    name = "Check deployment window"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        notes = "Check production deployment window. If we're not inside the time, fail the deployment."
        properties = {
            Octopus.Action.Script.ScriptBody = "Write-Host \"Checking production deployment window\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "production-approval" {
    name = "Production approval"

    action {
        action_type = "Octopus.Manual"
        environments = ["production"]
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Please review and approve this deployment."
            Octopus.Action.Manual.ResponsibleTeamIds = "global/everyone"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "update-infrastructure-using-terraform" {
    name = "Update infrastructure using Terraform"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-1841"
            Octopus.Action.Template.Version = "14"
            Run.Runbook.Api.Key = "#{Project.API.DNS}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Create infrastructure"
            Run.Runbook.Project.Name = "#{Octopus.Project.Name}"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "hosted-windows"
    }
}

step "update-rds-database" {
    name = "Update RDS database"

    action {
        action_type = "Octopus.AwsRunScript"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "Project.AWS.Account"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = "Write-Host \"Hello world!\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "deploy-asset-data-collector" {
    name = "Deploy Asset data collector"

    action {
        action_type = "Octopus.DeployRelease"
        properties = {
            Octopus.Action.DeployRelease.DeploymentCondition = "Always"
            Octopus.Action.DeployRelease.ProjectId = "asset-data-collection"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""
    }
}

step "deploy-asset-microservice" {
    name = "Deploy Asset microservice"

    action {
        action_type = "Octopus.DeployRelease"
        properties = {
            Octopus.Action.DeployRelease.DeploymentCondition = "Always"
            Octopus.Action.DeployRelease.ProjectId = "asset-microservice"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""
    }
}

step "deploy-maintenance-service" {
    name = "Deploy maintenance service"

    action {
        action_type = "Octopus.DeployRelease"
        properties = {
            Octopus.Action.DeployRelease.DeploymentCondition = "Always"
            Octopus.Action.DeployRelease.ProjectId = "maintenance-logger-service"
        }
        worker_pool_variable = ""
    }
}

step "deploy-maintenance-data-collector" {
    name = "Deploy Maintenance data collector"

    action {
        action_type = "Octopus.DeployRelease"
        properties = {
            Octopus.Action.DeployRelease.DeploymentCondition = "Always"
            Octopus.Action.DeployRelease.ProjectId = "energy-data-collection"
        }
        worker_pool_variable = ""
    }
}

step "deploy-ticket-system-legacy" {
    name = "Deploy ticket system (legacy)"

    action {
        action_type = "Octopus.DeployRelease"
        properties = {
            Octopus.Action.DeployRelease.DeploymentCondition = "Always"
            Octopus.Action.DeployRelease.ProjectId = "legacy-ticket-system"
        }
        worker_pool_variable = ""
    }
}

step "upload-website-to-s3-bucket" {
    name = "Upload website to S3 bucket"

    action {
        action_type = "Octopus.AwsUploadS3"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.S3.BucketName = "#{AWS.S3.WebAppBucket}"
            Octopus.Action.Aws.S3.PackageOptions = "{\"bucketKey\":\"asdf\",\"bucketKeyBehaviour\":\"Custom\",\"bucketKeyPrefix\":\"\",\"storageClass\":\"STANDARD\",\"cannedAcl\":\"sadf\",\"variableSubstitutionPatterns\":\"adsf\",\"structuredVariableSubstitutionPatterns\":\"\",\"metadata\":[],\"tags\":[]}"
            Octopus.Action.Aws.S3.TargetMode = "EntirePackage"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "Project.AWS.Account"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.PackageId = "RandomQuotes"
        }
        worker_pool = "hosted-ubuntu"

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "RandomQuotes"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "notify-team" {
    name = "Notify Team"

    action {
        environments = ["production"]
        properties = {
            Channel = "adsf"
            DeploymentInfoText = "#{Octopus.Project.Name} release #{Octopus.Release.Number} to #{Octopus.Environment.Name} (#{Octopus.Machine.Name})"
            HookUrl = "#{AWS.RDS.Admin.Password}"
            IconUrl = "https://octopus.com/content/resources/favicon.png"
            IncludeErrorMessageOnFailure = "false"
            IncludeFieldEnvironment = "false"
            IncludeFieldMachine = "false"
            IncludeFieldProject = "True"
            IncludeFieldRelease = "false"
            IncludeFieldReleaseNotes = "false"
            IncludeFieldTenant = "false"
            IncludeFieldUsername = "false"
            IncludeLinkOnFailure = "false"
            Octopus.Action.Template.Id = "ActionTemplates-1843"
            Octopus.Action.Template.Version = "4"
            Username = "qa@demo.octopus.app"
        }
        worker_pool = "hosted-ubuntu"
    }
}